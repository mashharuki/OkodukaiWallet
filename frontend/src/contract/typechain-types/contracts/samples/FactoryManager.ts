/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface FactoryManagerInterface extends utils.Interface {
  functions: {
    "ENTRY_POINT_ADDRESS()": FunctionFragment;
    "addStake(address,uint32)": FunctionFragment;
    "createFactory()": FunctionFragment;
    "factories(uint256)": FunctionFragment;
    "factoryMap(uint256)": FunctionFragment;
    "getFactories()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ENTRY_POINT_ADDRESS"
      | "addStake"
      | "createFactory"
      | "factories"
      | "factoryMap"
      | "getFactories"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ENTRY_POINT_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addStake",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "factories",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "factoryMap",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFactories",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "ENTRY_POINT_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factories", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factoryMap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFactories",
    data: BytesLike
  ): Result;

  events: {
    "FactoryCreated(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FactoryCreated"): EventFragment;
}

export interface FactoryCreatedEventObject {
  factoryId: BigNumber;
  factoryAddress: string;
}
export type FactoryCreatedEvent = TypedEvent<
  [BigNumber, string],
  FactoryCreatedEventObject
>;

export type FactoryCreatedEventFilter = TypedEventFilter<FactoryCreatedEvent>;

export interface FactoryManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FactoryManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ENTRY_POINT_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    addStake(
      factoryAddress: PromiseOrValue<string>,
      unstakeDelaySec: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createFactory(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    factories(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    factoryMap(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getFactories(
      overrides?: CallOverrides
    ): Promise<[string[]] & { coll: string[] }>;
  };

  ENTRY_POINT_ADDRESS(overrides?: CallOverrides): Promise<string>;

  addStake(
    factoryAddress: PromiseOrValue<string>,
    unstakeDelaySec: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createFactory(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  factories(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  factoryMap(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getFactories(overrides?: CallOverrides): Promise<string[]>;

  callStatic: {
    ENTRY_POINT_ADDRESS(overrides?: CallOverrides): Promise<string>;

    addStake(
      factoryAddress: PromiseOrValue<string>,
      unstakeDelaySec: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createFactory(overrides?: CallOverrides): Promise<void>;

    factories(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    factoryMap(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getFactories(overrides?: CallOverrides): Promise<string[]>;
  };

  filters: {
    "FactoryCreated(uint256,address)"(
      factoryId?: null,
      factoryAddress?: null
    ): FactoryCreatedEventFilter;
    FactoryCreated(
      factoryId?: null,
      factoryAddress?: null
    ): FactoryCreatedEventFilter;
  };

  estimateGas: {
    ENTRY_POINT_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    addStake(
      factoryAddress: PromiseOrValue<string>,
      unstakeDelaySec: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createFactory(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    factories(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factoryMap(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFactories(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ENTRY_POINT_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addStake(
      factoryAddress: PromiseOrValue<string>,
      unstakeDelaySec: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createFactory(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    factories(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    factoryMap(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFactories(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
